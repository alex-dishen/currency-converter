{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor(currency) {\n    this.currency = currency;\n    this.title = 'Currency Swap';\n    this.currJSON = [];\n    this.base = 'USD';\n    this.rightCurrency = 'UAH';\n    this.result = '';\n    this.numberToConvert = 0;\n    this.currentDollar = 0;\n    this.currentEuro = 0;\n  }\n  changeBase(a) {\n    this.base = a;\n  }\n  toCountry(b) {\n    this.rightCurrency = b;\n  }\n  getCurrentCurrencies() {\n    this.currency.getCurrencyData(\"USD\").subscribe(data => {\n      this.currJSON = JSON.stringify(data);\n      this.currJSON = JSON.parse(this.currJSON);\n      this.currentDollar = this.currJSON.rates.UAH;\n    });\n    this.currency.getCurrencyData(\"EUR\").subscribe(data => {\n      this.currJSON = JSON.stringify(data);\n      this.currJSON = JSON.parse(this.currJSON);\n      this.currentEuro = this.currJSON.rates.UAH;\n    });\n  }\n  convert(digit) {\n    this.numberToConvert = digit;\n    this.currency.getCurrencyData(this.base).subscribe(data => {\n      this.currJSON = JSON.stringify(data);\n      this.currJSON = JSON.parse(this.currJSON);\n      if (this.rightCurrency === 'USD') {\n        this.currentDollar;\n        let outcome = +this.currJSON.rates.USD * this.numberToConvert;\n        this.result = outcome.toFixed(2);\n      }\n      if (this.rightCurrency === 'EUR') {\n        this.currentEuro = this.currJSON.rates.EUR;\n        let outcome = +this.currentEuro * this.numberToConvert;\n        this.result = outcome.toFixed(2);\n      }\n      if (this.rightCurrency === 'UAH') {\n        let outcome = +this.currJSON.rates.UAH * this.numberToConvert;\n        this.result = outcome.toFixed(2);\n      }\n    });\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":"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","names":["Component","AppComponent","constructor","currency","changeBase","a","base","toCountry","b","rightCurrency","getCurrentCurrencies","getCurrencyData","subscribe","data","currJSON","JSON","stringify","parse","currentDollar","rates","UAH","currentEuro","convert","digit","numberToConvert","outcome","USD","result","toFixed","EUR","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/alex-dishen/Developer/Projects/currency-converter/src/app/app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { CurrencyAPIDataService } from './service/currency-api-data.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Currency Swap';\n\n  currJSON: any = [];\n  base = 'USD';\n  rightCurrency = 'UAH';\n  result: string = '';\n  numberToConvert: number = 0;\n  currentDollar: number = 0;\n  currentEuro: number = 0;\n\n\n  changeBase(a: string) {\n    this.base = a;\n  }\n\n  toCountry(b: string) {\n    this.rightCurrency = b;\n  }\n\n  constructor(private currency: CurrencyAPIDataService) {}\n\n  getCurrentCurrencies() {\n    this.currency.getCurrencyData(\"USD\").subscribe(data => {\n      this.currJSON = JSON.stringify(data);\n      this.currJSON = JSON.parse(this.currJSON);\n\n      this.currentDollar = this.currJSON.rates.UAH;\n    })\n\n    this.currency.getCurrencyData(\"EUR\").subscribe(data => {\n      this.currJSON = JSON.stringify(data);\n      this.currJSON = JSON.parse(this.currJSON);\n\n      this.currentEuro = this.currJSON.rates.UAH\n    })\n  }\n\n  convert(digit: number) {\n    this.numberToConvert = digit;\n    this.currency.getCurrencyData(this.base).subscribe(data => {\n      this.currJSON = JSON.stringify(data);\n      this.currJSON = JSON.parse(this.currJSON);\n      if (this.rightCurrency === 'USD') {\n        this.currentDollar\n        let outcome = +this.currJSON.rates.USD * this.numberToConvert;\n        this.result = outcome.toFixed(2);\n      }\n      if (this.rightCurrency === 'EUR') {\n        this.currentEuro = this.currJSON.rates.EUR;\n        let outcome = +this.currentEuro * this.numberToConvert;\n        this.result = outcome.toFixed(2);\n      }\n      if (this.rightCurrency === 'UAH') {\n        let outcome = +this.currJSON.rates.UAH * this.numberToConvert;\n        this.result = outcome.toFixed(2);\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}